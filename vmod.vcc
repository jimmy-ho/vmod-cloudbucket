# Copyright (c) 2024 James Ho Author: James Ho

$Module cloudbucket 3 "Proxy cloud bucket HTTP requests"

$Event event_function

$Object client(PRIV_VCL,
	STRING s3_bucket,
	STRING region = "us-east-1",
	INT follow = 10,
	[DURATION timeout],
	[DURATION connect_timeout],
	BOOL auto_gzip = 1,
	BOOL auto_deflate = 1,
	BOOL auto_brotli = 1,
	BOOL accept_invalid_certs = 0,
	BOOL accept_invalid_hostnames = 0,
	[STRING http_proxy],
	[STRING https_proxy]
	)

Create a `client` object that can be used for backend requests. All arguments are optional.

`s3_bucket` references the S3 bucket to proxy requests to.

`region` specifies the region to use for the bucket.

`follow` dictates whether to follow redirects, and how many hops are allowed before becoming an error. A value of `0` or less will disable redirect folowing, meaning you will actually receive 30X responses if they are sent by the server.

`connect_timeout` and `timeout` dictate how long we give a request to connect, and finish, respectively.

`auto_gzip`, `auto_deflate` and `auto_brotli`, if set, will automatically set the relevant `accept-encoding` values and automatically decompress the response body. Note that this will only work if the `accept-encoding` header isn't already set AND if there's no `range` header. In practice, when contacting a backend, you will need to `unset bereq.http.accept-encoding;`, as Varnish sets it automatically.

`accept_invalid_certs` will avoid erroring on invalid certificates, for example self-signed ones. It's a dangerous option, use at your own risk!

`accept_invalid_hostnames` is even more dangerous and doesn't even require for the certificate hostname to match the server being contacted.

`http_proxy`/`https_proxy` allow you to set an HTTP(S) proxy to send your requests through.

$Method BACKEND .backend()

Return a VCL backend built upon the `client`.
